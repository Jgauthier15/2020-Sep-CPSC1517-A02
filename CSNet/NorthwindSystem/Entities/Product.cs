using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#region Additional Namespace
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
#endregion

namespace NorthwindSystem.Entities
{
    //anotations are used to assist EntityFramework in the mapping of your
    //  class to the sql table

    //anotation for properties are placed BEFORE the property!!!
    [Table("Products")]
    public class Product
    {
        //private data member
        private string _QuantityPerUnit;

        //if you use the same name as the sql attribute for your property
        //      name, order of properties does not matter.
        //if your names are different, then Order is required.

        //[Key] single attribute primary, identity key
        //[Key, Column(Order=n)]  compound pkey, required in front of each
        //      property, n represents the physical order as found on the sql table
        //[Key, DatabaseGenerated(DatabaseGeneratedOption.xxxx)]
        //  .xxxx = Identity: pkey on sql is an Identity Key (default)
        //          None    : pkey is NOT identity, user entered


        //[DatabaseGenerated(DatabaseGeneratedOption.Compute)] can also be used
        //  on a property that is NOT a primary key.
        //          Compute : the attribute is a sql computed attribute
        //              which means that NO actual data is stored in the sql tables,
        //              it is generated by the expression in the sql table.
        //Example: sql table has an attribute called Total which is calculated
        //          by two other attributes on the table called Quantity and Price
        //[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        //public decimal Total {get;set;}



        //[Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        public int ProductID { get; set; }

        //validation annotations
        [Required(ErrorMessage ="Product Name is required")]
        [StringLength(40,ErrorMessage ="Product Name is limited to 40 characters")]
        public string ProductName { get; set; }

        //this foreign key is nullable on the sql table (don't forget the ?)
        //you may be tempted to use the [ForeignKey] annotation
        //      BUT DON'T.
        //the [ForeignKey] annotation is ONLY required if the sql table does
        //  NOT use the same name for it's foreign key as it's parent primary key.
        //OR
        //if your property name does not match the sql attribute name
        public int? SupplierID { get; set; }
        public int? CategoryID { get; set; }

        //nullable string
        //you can still fully implement a nullable string property

        [StringLength(20, ErrorMessage = "Quantity per unit is limited to 20 characters")]
        public string QuantityPerUnit
        {
            get { return _QuantityPerUnit; }
            set { _QuantityPerUnit = string.IsNullOrEmpty(value) ? null: value; }
        }

        //money requires the use of a decimal, if it complains use a double.
        //UnitPrice is nullable
        //nullable numerics DO NOT need to be fully implemented
        [Range(0.00,double.MaxValue, ErrorMessage ="Unit Price is 0.00 or more")]
        public decimal? UnitPrice { get; set; }
        //------------------------------------------------------------------------//
        [Range(0, 32767, ErrorMessage = "Unit in stock is 0 or more")]
        public Int16? UnitsInStock { get; set; }
        //------------------------------------------------------------------------//
        [Range(0, 32767, ErrorMessage = "Units on order is 0 or more")]
        public Int16? UnitsOnOrder { get; set; }
        //------------------------------------------------------------------------//
        [Range(0, 32767, ErrorMessage = "Reorder level is 0 or more")]
        public Int16? ReorderLevel { get; set; }
        //------------------------------------------------------------------------//
        public bool Discontinued { get; set; }

        //Create a Read-Only property that is setup in your class to make programming
        //      easier
        //example : an Address
        //FullAddress = Street + " " + City + " " + Province + " " + PostalCode;
        //These types of properties do not contain data for the sql table
        //a NotMapped property in your entity class is a property that has NO
        //  corresponding sql table attribute

        [NotMapped]
        public string NameAndID
        {
            get { return ProductName + " (" + ProductID + ")"; }
        }
    }
}
